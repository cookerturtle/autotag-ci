{
  "version": 3,
  "sources": ["errors.ts", "index.ts"],
  "sourcesContent": ["/**\n * Public errors shared between @autotag-ci/core and all plugins.\n */\n\nexport class NoPluginFoundError extends Error {\n  constructor(dir: string) {\n    super(`No plugin claims responsibility for build dir: ${dir}`);\n    this.name = 'NoPluginFoundError';\n  }\n}\nexport class InvalidSnippetError extends Error {\n  constructor(path: string) {\n    super(`Snippet file not found or not readable: ${path}`);\n    this.name = 'InvalidSnippetError';\n  }\n}\n", "import { InjectOptions, Plugin, PluginModule } from './types'\nimport { NoPluginFoundError, InvalidSnippetError } from './errors';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\n/* ------------------------------------------------------------------ *\n * Private helpers                                                    *\n * ------------------------------------------------------------------ */\n\nconst PLUGIN_SPECIFIERS = [\n  // TEMP: one hard-coded plugin for the MVP\n  new URL('../../plugin-react/src/index.js', import.meta.url).pathname,\n];\n\nasync function ensureSnippetExists(file: string): Promise<void> {\n  try {\n    await fs.access(file);\n  } catch {\n    throw new InvalidSnippetError(`Snippet file not found or unreadable: ${file}`);\n  }\n}\n\nasync function loadPlugins(): Promise<Plugin[]> {\n  const plugins: Plugin[] = [];\n\n  for (const spec of PLUGIN_SPECIFIERS) {\n    try {\n      // dynamic import supports both CJS & ESM default/ named exports\n      const mod: PluginModule = await import(spec);\n      const candidate = mod?.default ? mod.default : mod;\n\n      if (typeof candidate.detect === 'function' && typeof candidate.inject === 'function') {\n        plugins.push(candidate as Plugin);\n      }\n    } catch {\n      // TEMP: file does not exist or is unreadable\n      break;\n    }\n  }\n\n  return plugins;\n}\n\n/* ------------------------------------------------------------------ *\n * Public API                                                         *\n * ------------------------------------------------------------------ */\n\nexport interface InjectRuntimeOptions extends InjectOptions {\n  /**\n   *  Optional explicit plugin list.  When provided, `inject()` uses this\n   *  array instead of calling `loadPlugins()`.  This is intended for\n   *  tests.\n   */\n  plugins?: Plugin[];\n}\n\n/**\n * Selects the first plugin that claims `buildDir` and delegates the\n * real work to it.  Throws when no plugin matches or the snippet path\n * is invalid.\n */\nexport async function inject(options: InjectRuntimeOptions): Promise<void> {\n  const opts: InjectRuntimeOptions = {\n    ...options,\n    buildDir: path.resolve(options.buildDir),\n    snippetPath: path.resolve(options.snippetPath),\n  };\n\n  await ensureSnippetExists(opts.snippetPath);\n\n  const plugins = opts.plugins ?? await loadPlugins();\n\n  for (const plugin of plugins) {\n    if (await plugin.detect(opts.buildDir)) {\n      await plugin.inject(opts);\n      return;\n    }\n  }\n\n  throw new NoPluginFoundError(\n    `Unable to find a plugin that recognises the build at \u201C${opts.buildDir}\u201D.`,\n  );\n}\n\nexport default { inject };"],
  "mappings": ";AAIO,IAAM,qBAAN,cAAiC,MAAM;AAAA,EAC5C,YAAY,KAAa;AACvB,UAAM,kDAAkD,GAAG,EAAE;AAC7D,SAAK,OAAO;AAAA,EACd;AACF;AACO,IAAM,sBAAN,cAAkC,MAAM;AAAA,EAC7C,YAAYA,OAAc;AACxB,UAAM,2CAA2CA,KAAI,EAAE;AACvD,SAAK,OAAO;AAAA,EACd;AACF;;;ACZA,SAAS,YAAY,UAAU;AAC/B,OAAO,UAAU;AAMjB,IAAM,oBAAoB;AAAA;AAAA,EAExB,IAAI,IAAI,mCAAmC,YAAY,GAAG,EAAE;AAC9D;AAEA,eAAe,oBAAoB,MAA6B;AAC9D,MAAI;AACF,UAAM,GAAG,OAAO,IAAI;AAAA,EACtB,QAAQ;AACN,UAAM,IAAI,oBAAoB,yCAAyC,IAAI,EAAE;AAAA,EAC/E;AACF;AAEA,eAAe,cAAiC;AAC9C,QAAM,UAAoB,CAAC;AAE3B,aAAW,QAAQ,mBAAmB;AACpC,QAAI;AAEF,YAAM,MAAoB,MAAM,OAAO;AACvC,YAAM,YAAY,KAAK,UAAU,IAAI,UAAU;AAE/C,UAAI,OAAO,UAAU,WAAW,cAAc,OAAO,UAAU,WAAW,YAAY;AACpF,gBAAQ,KAAK,SAAmB;AAAA,MAClC;AAAA,IACF,QAAQ;AAEN;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAoBA,eAAsB,OAAO,SAA8C;AACzE,QAAM,OAA6B;AAAA,IACjC,GAAG;AAAA,IACH,UAAU,KAAK,QAAQ,QAAQ,QAAQ;AAAA,IACvC,aAAa,KAAK,QAAQ,QAAQ,WAAW;AAAA,EAC/C;AAEA,QAAM,oBAAoB,KAAK,WAAW;AAE1C,QAAM,UAAU,KAAK,WAAW,MAAM,YAAY;AAElD,aAAW,UAAU,SAAS;AAC5B,QAAI,MAAM,OAAO,OAAO,KAAK,QAAQ,GAAG;AACtC,YAAM,OAAO,OAAO,IAAI;AACxB;AAAA,IACF;AAAA,EACF;AAEA,QAAM,IAAI;AAAA,IACR,8DAAyD,KAAK,QAAQ;AAAA,EACxE;AACF;AAEA,IAAO,cAAQ,EAAE,OAAO;",
  "names": ["path"]
}
